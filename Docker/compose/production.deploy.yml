version: '3'

volumes:
  production-caddy: 
    driver_opts:
      type: none
      device: /caddy
      o: bind

services:
  caddy:
    image: ${DOCKER_REGISTRY}crits_and_coffee_caddy:${DOCKER_PRODUCTION_TAG}
    container_name: caddy-production
    depends_on:
      - front-end-app
      - instagram-api
    volumes:
      - production-caddy:/root/.caddy
    env_file:
      - ../.envs/.production/.caddy
      - ../.envs/.private/.production/.aws
    deploy:
      placement:
          constraints:
            - node.role == manager
      mode: replicated
      replicas: 3
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    networks:
      - back-end
      - front-end
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  front-end-app:
    image: ${DOCKER_REGISTRY}crits_and_coffee_client_app:${DOCKER_PRODUCTION_TAG}
    container_name: client-app-production
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+80
      - NODE_ENV=production
    depends_on:
      - instagram-api
      - quant-api
    env_file:
      - ../.envs/.private/.production/.django
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    networks:
      - back-end
    
  auth-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${AUTH_API_PRODUCTION_TAG}
    container_name: auth-api-production
    depends_on:
      - postgres
    networks:
      - back-end
    env_file:
      - ../.envs/.private/.production/.flask_auth
      - ../.envs/.private/.production/.postgres
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    command: /start

  instagram-api: &instagram-api
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${INSTAGRAM_API_PRODUCTION_TAG}
    container_name: instagram-api-production
    depends_on:
      - redis
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    networks:
      - back-end
    env_file:
      - ../.envs/.private/.instagram
      - ../.envs/.private/.production/.django
      - ../.envs/.private/.production/.postgres
    command: /start

  quant-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${QUANT_API_PRODUCTION_TAG}
    container_name: quant-api-production
    depends_on:
      - instagram-api
    networks:
      - back-end
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    env_file:
      - ../.envs/.private/.production/.postgres
      - ../.envs/.private/.production/.flask_quant
      - ../.envs/.private/.production/.django
      - ../.envs/.private/.quandl
    command: /start

  redis:
    image: redis:3.2
    container_name: redis-production
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    networks:
      - back-end

  selenium:
    image: selenium/standalone-chrome
    container_name: instagram-selenium-production
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
          limits:
            cpus: '0.50'
            memory: 50M
    networks:
      - back-end

  celeryworker:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_WORKER_PRODUCTION_TAG}
    container_name: celeryworker-production
    command: /start-celeryworker
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
          limits:
            cpus: '0.50'
            memory: 50M
    networks:
      - back-end

  celerybeat:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_BEAT_PRODUCTION_TAG}
    container_name: celerybeat-production
    command: /start-celerybeat
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
          limits:
            cpus: '0.50'
            memory: 50M
    networks:
      - back-end

  flower:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${FLOWER_PRODUCTION_TAG}
    container_name: flower-production
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
          limits:
            cpus: '0.50'
            memory: 50M
    networks:
      - front-end
      - back-end
    ports:
      - "5555:5555"
    command: /start-flower

networks:
  front-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
  back-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
version: '3'

volumes:
  efs_storage:
    driver: rexray/efs:latest
  production_postgres_data: {}
  production_postgres_data_backups:
    driver: rexray/efs:latest
  production_caddy:
    driver: rexray/efs:latest
  production_logs: 
    driver: rexray/efs:latest

services:
  caddy:
    build:
      context: ./production
      dockerfile: production/caddy/Dockerfile.caddy.Prod
    image: ${DOCKER_REGISTRY}crits_and_coffee_caddy:${DOCKER_PRODUCTION_TAG}
    depends_on:
      - front-end-app
      - instagram-api
    volumes:
      - production_caddy:/root/.caddy
    env_file:
      - ../.envs/.production/.caddy
      - ../.envs/.private/.production/.aws
    networks:
      - back-end
      - front-end
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  front-end-app:
    image: ${DOCKER_REGISTRY}crits_and_coffee_client_app:${DOCKER_PRODUCTION_TAG}
    container_name: client-app-production
    build:
      context: ../../CritsAndCoffee.ClientApp/CritsAndCoffeeClientApp
      dockerfile: ../../Docker/compose/production/Dockerfile.ClientApp.Prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - NODE_ENV=production
    depends_on:
      - postgres
      - instagram-api
      - quant-api
      - logger-api
    networks:
      - back-end

  instagram-api: &instagram-api
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${INSTAGRAM_API_PRODUCTION_TAG}
    container_name: instagram-api-production
    build:
      context: ../../CritsAndCoffee.Instagram.API
      dockerfile: ../Docker/compose/production/Dockerfile.Instagram.API.Prod
    volumes:
      - production_logs:/crits-logs/
    links:
      - selenium
    depends_on:
      - postgres
      - redis
    networks:
      - back-end
    env_file:
      - ../.envs/.private/.instagram
      - ../.envs/.private/.production/.django
      - ../.envs/.private/.production/.postgres
    command: /start

  quant-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${QUANT_API_PRODUCTION_TAG}
    container_name: quant-api-production
    build:
      context: ../../CritsAndCoffee.Quant.API
      dockerfile: ../Docker/compose/production/Dockerfile.Quant.API.Prod
    depends_on:
      - postgres
      - instagram-api
      - logger-api
    networks:
      - back-end
    env_file:
      - ../.envs/.private/.production/.postgres
      - ../.envs/.private/.production/.flask_quant
      - ../.envs/.private/.quandl
    command: /start

  logger-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${LOGGER_API_PRODUCTION_TAG}
    container_name: logger-api-production
    build:
      context: ../../CritsAndCoffee.Logger.API
      dockerfile: ../Docker/compose/production/Dockerfile.Logger.API.Prod
    volumes:
      - production_logs:/crits-logs/
    depends_on:
      - postgres
    networks:
      - back-end
    env_file:
      - ../.envs/.private/.production/.flask_logger
    command: /start

  postgres:
    build:
      context: ./production/postgres
      dockerfile: ./Dockerfile
    image: ${DOCKER_REGISTRY}crits_and_coffee_postgres:${DOCKER_PRODUCTION_TAG}
    networks:
      - back-end
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ../.envs/.private/.production/.postgres

  redis:
    image: redis:3.2
    networks:
      - back-end

  selenium:
    image: selenium/standalone-chrome
    networks:
      - back-end

  celeryworker:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_WORKER_PRODUCTION_TAG}
    command: /start-celeryworker
    networks:
      - back-end

  celerybeat:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_BEAT_PRODUCTION_TAG}
    command: /start-celerybeat
    networks:
      - back-end

  flower:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${FLOWER_PRODUCTION_TAG}
    networks:
      - front-end
      - back-end
    ports:
      - "5555:5555"
    command: /start-flower

networks:
  front-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
  back-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
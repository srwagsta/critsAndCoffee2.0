version: '3'

services:
  caddy:
    image: ${DOCKER_REGISTRY}crits_and_coffee_caddy:${DOCKER_PRODUCTION_TAG}
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile.caddy
      args:
        - caddyfile_version=Caddyfile.production


  front-end-app:
    image: ${DOCKER_REGISTRY}crits_and_coffee_client_app:${DOCKER_PRODUCTION_TAG}
    build:
      context: ../../CritsAndCoffee.ClientApp/CritsAndCoffeeClientApp
      dockerfile: ../../Docker/compose/dockerfiles/Dockerfile.ClientApp.Prod

  auth-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${AUTH_API_PRODUCTION_TAG}
    container_name: auth-api-production
    build: 
      context: ../../CritsAndCoffee.Auth.API
      dockerfile: ../Docker/compose/dockerfiles/Dockerfile.Auth.API


  instagram-api: &instagram-api
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${INSTAGRAM_API_PRODUCTION_TAG}
    build:
      context: ../../CritsAndCoffee.Instagram.API
      dockerfile: ../Docker/compose/dockerfiles/Dockerfile.Instagram.API
      args:
        - django_requirements_file=production.txt
        - django_start_script_version=start.prod
        - django_celery_directory=celery.prod


  quant-api:
    image: ${DOCKER_REGISTRY}crits_and_coffee_api:${QUANT_API_PRODUCTION_TAG}
    build:
      context: ../../CritsAndCoffee.Quant.API
      dockerfile: ../Docker/compose/dockerfiles/Dockerfile.Quant.API

  redis:
    image: redis:3.2
    networks:
      - back-end

  selenium:
    image: selenium/standalone-chrome
    networks:
      - back-end

  celeryworker:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_WORKER_PRODUCTION_TAG}
    command: /start-celeryworker
    networks:
      - back-end

  celerybeat:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${CELERY_BEAT_PRODUCTION_TAG}
    command: /start-celerybeat
    networks:
      - back-end

  flower:
    <<: *instagram-api
    image: ${DOCKER_REGISTRY}${ACCESSORY_CONTAINER_REPOSITORY}:${FLOWER_PRODUCTION_TAG}
    networks:
      - front-end
      - back-end
    ports:
      - "5555:5555"
    command: /start-flower

networks:
  front-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
  back-end:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"